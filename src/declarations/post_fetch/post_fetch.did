type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  query_stats : QueryStats;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
  reserved_cycles : nat;
};
type CanisterStatusType = variant { stopped; stopping; running };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  reserved_cycles_limit : nat;
  wasm_memory_limit : nat;
  memory_allocation : nat;
  compute_allocation : nat;
};
type InitArg = record { root_feed : principal };
type QueryStats = record {
  response_payload_bytes_total : nat;
  num_instructions_total : nat;
  num_calls_total : nat;
  request_payload_bytes_total : nat;
};
service : (InitArg) -> {
  get_delete_notify_map_entries : () -> (
      vec record { principal; vec text },
    ) query;
  get_notify_map_entries : () -> (vec record { principal; vec text }) query;
  receive_delete_notify : (vec principal, text) -> ();
  receive_notify : (vec principal, text) -> ();
  status : () -> (CanisterStatusResponse);
}
