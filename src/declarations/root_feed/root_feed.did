type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  query_stats : QueryStats;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
  reserved_cycles : nat;
};
type CanisterStatusType = variant { stopped; stopping; running };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  reserved_cycles_limit : nat;
  log_visibility : LogVisibility;
  wasm_memory_limit : nat;
  memory_allocation : nat;
  compute_allocation : nat;
};
type LogVisibility = variant { controllers; public };
type QueryStats = record {
  response_payload_bytes_total : nat;
  num_instructions_total : nat;
  num_calls_total : nat;
  request_payload_bytes_total : nat;
};
service : (principal, principal) -> {
  create_feed_canister : () -> (principal);
  get_all_feed_canister : () -> (vec principal) query;
  get_available_feed_canister_index : () -> (nat64) query;
  get_feed_canister_index : () -> (nat64) query;
  get_feed_canister_users_number_entries : () -> (
      vec record { principal; nat64 },
    ) query;
  get_feed_wasm : () -> (blob) query;
  get_registered_user_number : () -> (nat64) query;
  get_root_bucket : () -> (principal) query;
  get_user_actor : () -> (principal) query;
  get_user_feed_canister : (principal) -> (opt principal) query;
  get_user_feed_canister_entries : () -> (
      vec record { principal; principal },
    ) query;
  init_fetch_actor : (principal) -> ();
  init_user_feed : () -> (principal);
  set_root_bucket : (principal) -> (bool);
  set_user_actor : (principal) -> (bool);
  status : () -> (CanisterStatusResponse);
  update_feed_canister_controller : (principal) -> (bool);
  update_feed_wasm : (blob, nat64) -> (bool);
}
