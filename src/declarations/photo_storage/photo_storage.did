type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  query_stats : QueryStats;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
  reserved_cycles : nat;
};
type CanisterStatusType = variant { stopped; stopping; running };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  reserved_cycles_limit : nat;
  log_visibility : LogVisibility;
  wasm_memory_limit : nat;
  memory_allocation : nat;
  compute_allocation : nat;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type LogVisibility = variant { controllers; public };
type QueryStats = record {
  response_payload_bytes_total : nat;
  num_instructions_total : nat;
  num_calls_total : nat;
  request_payload_bytes_total : nat;
};
type StreamingStrategy = variant {
  Callback : record {
    token : Token;
    callback : func (Token) -> (HttpResponse) query;
  };
};
type Token = record {
  key : text;
  sha256 : opt blob;
  index : nat;
  content_encoding : text;
};
service : {
  get_photo : (nat64) -> (opt blob) query;
  get_photo_number : () -> (nat64) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  status : () -> (CanisterStatusResponse);
  upload_photo : (blob) -> (nat64);
}
