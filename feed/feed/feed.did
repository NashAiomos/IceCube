type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  query_stats : QueryStats;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
  reserved_cycles : nat;
};
type CanisterStatusType = variant { stopped; stopping; running };
type Comment = record { content : text; user : principal; created_at : nat64 };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  reserved_cycles_limit : nat;
  wasm_memory_limit : nat;
  memory_allocation : nat;
  compute_allocation : nat;
};
type FeedInitArg = record {
  post_fetch_actor : principal;
  owner : principal;
  root_bucket : principal;
  user_actor : principal;
};
type Like = record { user : principal; created_at : nat64 };
type Post = record {
  repost : vec Like;
  post_id : text;
  photo_url : vec text;
  content : text;
  like : vec Like;
  user : principal;
  created_at : nat64;
  comment : vec Comment;
  feed_canister : principal;
  index : nat64;
};
type QueryStats = record {
  response_payload_bytes_total : nat;
  num_instructions_total : nat;
  num_calls_total : nat;
  request_payload_bytes_total : nat;
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TransferResult = variant { Ok : nat; Err : TransferError };
type WalletTX = record {
  time : nat64;
  tx_hash : text;
  tx_type : WalletTXType;
  amount : nat64;
};
type WalletTXType = variant { Send; Receive };
service : (FeedInitArg) -> {
  batch_delete_feed : (vec text) -> ();
  batch_receive_feed : (vec text) -> ();
  check_available_bucket : () -> (bool);
  ckBTC_balance : () -> (nat) query;
  ckBTC_tx : () -> (vec WalletTX) query;
  create_comment : (text, text) -> (bool);
  create_like : (text) -> (bool);
  create_post : (text, vec text) -> (text);
  create_repost : (text) -> (bool);
  delete_post : (text) -> (bool);
  get_all_post : () -> (vec Post) query;
  get_bucket : () -> (opt principal) query;
  get_feed : (text) -> (opt Post) query;
  get_feed_number : () -> (nat64) query;
  get_latest_feed : (nat64) -> (vec Post) query;
  get_owner : () -> (principal) query;
  get_post : (text) -> (opt Post) query;
  get_post_number : () -> (nat64) query;
  ghost_balance : () -> (nat) query;
  ghost_tx : () -> (vec WalletTX) query;
  icp_balance : () -> (nat) query;
  icp_tx : () -> (vec WalletTX) query;
  icrc1_transfer : (principal, principal, nat64) -> (TransferResult);
  receive_feed : (text) -> (bool);
  status : () -> (CanisterStatusResponse);
  token_balance : (principal) -> (nat) query;
  topup_by_icp : (nat64) -> (bool);
  transfer_ckBTC : (principal, nat64) -> (TransferResult);
  transfer_ghost : (principal, nat64) -> (TransferResult);
  transfer_icp : (principal, nat64) -> (TransferResult);
  update_owner : (principal) -> ();
}
