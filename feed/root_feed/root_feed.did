type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  query_stats : QueryStats;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
  reserved_cycles : nat;
};
type CanisterStatusType = variant { stopped; stopping; running };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  reserved_cycles_limit : nat;
  log_visibility : LogVisibility;
  wasm_memory_limit : nat;
  memory_allocation : nat;
  compute_allocation : nat;
};
type LogVisibility = variant { controllers; public };
type QueryStats = record {
  response_payload_bytes_total : nat;
  num_instructions_total : nat;
  num_calls_total : nat;
  request_payload_bytes_total : nat;
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TransferResult = variant { Ok : nat; Err : TransferError };
type WalletTX = record {
  time : nat64;
  tx_hash : text;
  tx_type : WalletTXType;
  amount : nat64;
};
type WalletTXType = variant { Send; Receive };
service : (principal, principal) -> {
  ckBTC_balance : (principal) -> (nat);
  ckBTC_tx : (principal) -> (vec WalletTX);
  create_feed_canister : () -> (principal);
  get_account_identifier : (principal) -> (text) query;
  get_all_feed_canister : () -> (vec principal) query;
  get_available_feed_canister_index : () -> (nat64) query;
  get_feed_canister_index : () -> (nat64) query;
  get_feed_canister_users_number_entries : () -> (
      vec record { principal; nat64 },
    ) query;
  get_feed_wasm : () -> (blob) query;
  get_root_bucket : () -> (principal) query;
  get_subaccount : (principal) -> (blob) query;
  get_user_actor : () -> (principal) query;
  get_user_feed_canister : (principal) -> (opt principal) query;
  get_user_feed_canister_entries : () -> (
      vec record { principal; principal },
    ) query;
  ghost_balance : (principal) -> (nat);
  ghost_tx : (principal) -> (vec WalletTX);
  icp_balance : (principal) -> (nat);
  icp_tx : (principal) -> (vec WalletTX);
  icrc1_transfer : (principal, principal, nat64) -> (TransferResult);
  init_fetch_actor : (principal) -> ();
  init_user_feed : () -> (principal);
  set_root_bucket : (principal) -> (bool);
  set_user_actor : (principal) -> (bool);
  status : () -> (CanisterStatusResponse);
  token_balance : (principal, principal) -> (nat);
  topup_by_icp : (nat64) -> (bool);
  transfer_ckBTC : (principal, nat64) -> (TransferResult);
  transfer_ghost : (principal, nat64) -> (TransferResult);
  transfer_icp : (principal, nat64) -> (TransferResult);
  update_feed_canister_controller : (principal) -> (bool);
  update_feed_wasm : (blob, nat64) -> (bool);
}
